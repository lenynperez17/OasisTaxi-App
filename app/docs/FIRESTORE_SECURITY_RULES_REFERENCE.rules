// ==================== FIREBASE SECURITY RULES PROFESIONALES ====================
// Reglas de seguridad estrictas para AppOasisTaxi
// CRÍTICO: Estas reglas DEBEN ser implementadas para prevenir acceso no autorizado

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== REGLAS DE USUARIOS ====================
    match /users/{userId} {
      // Solo el usuario propietario puede leer/escribir sus datos
      allow read, write: if request.auth != null 
        && request.auth.uid == userId
        && isValidUserData(request.resource.data);
        
      // Administradores pueden leer usuarios (solo metadatos públicos)
      allow read: if request.auth != null 
        && isAdmin(request.auth.uid);
        
      // Creación de nuevo usuario - validación estricta
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && isValidNewUser(request.resource.data)
        && hasValidPhoneNumber(request.resource.data.phone)
        && hasValidEmail(request.resource.data.email);
    }
    
    // ==================== LOGS DE SEGURIDAD ====================
    match /security_logs/{logId} {
      // Solo escritura para autenticados (para logging)
      allow create: if request.auth != null
        && isValidSecurityLog(request.resource.data);
        
      // Solo administradores pueden leer logs
      allow read: if request.auth != null 
        && isAdmin(request.auth.uid);
        
      // No se permite actualización o eliminación de logs
      allow update, delete: if false;
    }
    
    // ==================== CONFIGURACIÓN DE SISTEMA ====================
    match /system_config/{configId} {
      // Solo administradores pueden leer/escribir configuración
      allow read, write: if request.auth != null 
        && isAdmin(request.auth.uid);
    }
    
    // ==================== SESIONES DE USUARIO ====================
    match /user_sessions/{sessionId} {
      // Solo el usuario propietario puede gestionar sus sesiones
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.user_id;
        
      // Creación automática controlada
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.user_id
        && isValidSession(request.resource.data);
    }
    
    // ==================== BLOQUEOS DE CUENTA ====================
    match /account_locks/{lockId} {
      // Solo lectura para el usuario afectado
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.user_id;
        
      // Solo el sistema puede crear/actualizar bloqueos
      allow create, update: if request.auth != null 
        && (isSystemService(request.auth.uid) || isAdmin(request.auth.uid));
        
      // No eliminación de bloqueos (audit trail)
      allow delete: if false;
    }
    
    // ==================== RATE LIMITING ====================
    match /rate_limits/{limitId} {
      // Solo lectura para validación interna
      allow read: if request.auth != null;
      
      // Solo el sistema puede crear/actualizar límites
      allow create, update: if request.auth != null 
        && isSystemService(request.auth.uid);
        
      // Auto-limpieza después de tiempo especificado
      allow delete: if request.auth != null 
        && resource.data.expires_at < request.time;
    }
    
    // ==================== FUNCIONES DE VALIDACIÓN ====================
    
    // Validar si el usuario es administrador
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId)) ||
             get(/databases/$(database)/documents/users/$(userId)).data.userType == 'admin';
    }
    
    // Validar si es un servicio del sistema
    function isSystemService(userId) {
      return userId in ['system-service', 'firebase-functions'] ||
             exists(/databases/$(database)/documents/system_services/$(userId));
    }
    
    // Validar datos de usuario
    function isValidUserData(data) {
      return data.keys().hasAll(['fullName', 'email', 'phone', 'userType']) &&
             data.fullName is string && data.fullName.size() > 0 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.phone is string && data.phone.matches('^9[0-9]{8}$') &&
             data.userType in ['passenger', 'driver', 'admin'];
    }
    
    // Validar nuevo usuario
    function isValidNewUser(data) {
      return isValidUserData(data) &&
             data.keys().hasAll(['createdAt', 'updatedAt']) &&
             data.createdAt == request.time &&
             data.updatedAt == request.time &&
             data.isActive == true &&
             data.isVerified == false;
    }
    
    // Validar número telefónico peruano
    function hasValidPhoneNumber(phone) {
      return phone is string && 
             phone.matches('^9[0-9]{8}$') && // Formato peruano
             phone.size() == 9;
    }
    
    // Validar email
    function hasValidEmail(email) {
      return email is string && 
             email.matches('.*@.*\\..*') &&
             email.size() <= 254 &&
             email.size() >= 5;
    }
    
    // Validar log de seguridad
    function isValidSecurityLog(data) {
      return data.keys().hasAll(['event_type', 'severity', 'timestamp']) &&
             data.event_type is string &&
             data.severity in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'] &&
             data.timestamp is timestamp &&
             data.timestamp <= request.time;
    }
    
    // Validar sesión de usuario
    function isValidSession(data) {
      return data.keys().hasAll(['user_id', 'created_at', 'device_info']) &&
             data.user_id is string &&
             data.created_at == request.time;
    }
    
    // ==================== REGLAS RESTRICTIVAS POR DEFECTO ====================
    // Denegar acceso a todo lo demás por defecto (principio de menor privilegio)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ==================== REGLAS PARA FIREBASE STORAGE ====================
service firebase.storage {
  match /b/{bucket}/o {
    
    // Avatares de usuario
    match /user_avatars/{userId}/{fileName} {
      allow read: if true; // Avatares públicos
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidImage(fileName);
    }
    
    // Documentos de conductores (licencias, etc.)
    match /driver_documents/{userId}/{document} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
        
      // Administradores pueden revisar documentos
      allow read: if request.auth != null 
        && isAdmin(request.auth.uid);
    }
    
    // Validar archivo de imagen
    function isValidImage(fileName) {
      return fileName.matches('.*\\.(jpg|jpeg|png|gif)$') &&
             request.resource.size <= 5 * 1024 * 1024; // 5MB máximo
    }
    
    // Validar si usuario es admin (Storage rules)
    function isAdmin(userId) {
      return firestore.get(/databases/(default)/documents/users/$(userId)).data.userType == 'admin';
    }
    
    // Denegar acceso por defecto
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

// ==================== INSTRUCCIONES DE IMPLEMENTACIÓN ====================

/*

PASOS CRÍTICOS PARA IMPLEMENTAR ESTAS REGLAS:

1. FIREBASE CONSOLE - FIRESTORE DATABASE:
   - Ir a Firebase Console > Firestore Database > Rules
   - COPIAR Y PEGAR estas reglas completamente
   - CLICK en "Publish" - CONFIRMAR que se aplicaron correctamente

2. FIREBASE CONSOLE - STORAGE:
   - Ir a Firebase Console > Storage > Rules
   - COPIAR Y PEGAR las reglas de Storage
   - CLICK en "Publish" - CONFIRMAR aplicación

3. VALIDACIÓN CRÍTICA:
   - Ejecutar pruebas de penetración después de implementar
   - Verificar que usuarios no puedan acceder a datos de otros usuarios
   - Confirmar que administradores tienen permisos correctos
   - Validar que logs de seguridad funcionan correctamente

4. MONITOREO:
   - Habilitar Firebase Security Rules monitoring
   - Configurar alertas para intentos de acceso denegado
   - Revisar logs de seguridad regularmente

⚠️  ADVERTENCIAS CRÍTICAS:

- NUNCA usar allow read, write: if true; en producción
- SIEMPRE validar request.auth != null antes de permitir acceso
- PROBAR exhaustivamente antes de desplegar
- Las reglas son CASE-SENSITIVE y un error de sintaxis bloqueará toda la aplicación
- Mantener backup de reglas anteriores antes de cambios

💡 MEJORAS FUTURAS:

- Implementar rate limiting a nivel de reglas
- Agregar validación de geolocalización para conductores
- Implementar audit trail más detallado
- Configurar alertas automáticas para patrones sospechosos

*/