# ====================================================================
# 🚀 CONFIGURACIÓN REDIS MEMORY STORE - OASISTAXI PERÚ
# ====================================================================
# Estado en tiempo real para conductores y solicitudes activas
# Optimizado para alta concurrencia con TTL inteligente
# ====================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-oasistaxi-config
  namespace: oasistaxi-prod
  labels:
    app: oasistaxi-redis
    env: production
    region: southamerica-east1
data:
  # ====================================================================
  # 📊 CONFIGURACIÓN PRINCIPAL REDIS PERU
  # ====================================================================
  redis.conf: |
    # Configuración optimizada para OasisTaxi Perú
    bind 0.0.0.0
    port 6379
    
    # Memoria optimizada para estado tiempo real
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    
    # Persistencia para datos críticos
    save 900 1
    save 300 10
    save 60 10000
    
    # Configuración para alta concurrencia
    tcp-keepalive 300
    tcp-backlog 511
    timeout 0
    
    # Logging para monitoreo
    loglevel notice
    logfile "/var/log/redis/redis-server.log"
    
    # Configuración de red optimizada
    tcp-nodelay yes
    maxclients 10000
    
    # Configuración de seguridad
    requirepass "OasisTaxiPeru2024Redis!@#"
    
    # Configuración de clustering para alta disponibilidad
    cluster-enabled no
    
  # ====================================================================
  # 🔧 CONFIGURACIÓN ESPECÍFICA OASISTAXI
  # ====================================================================
  app-config.yaml: |
    # Configuración para manejo de estado de conductores
    drivers:
      active_ttl: 300      # 5 minutos TTL para conductores activos
      location_ttl: 60     # 1 minuto TTL para ubicaciones
      status_ttl: 600      # 10 minutos TTL para estados
      
    # Configuración para solicitudes de viaje
    ride_requests:
      active_ttl: 900      # 15 minutos TTL para solicitudes activas
      matching_ttl: 180    # 3 minutos TTL para matching
      negotiation_ttl: 600 # 10 minutos TTL para negociaciones
      
    # Configuración para caché de precios
    pricing:
      base_fare_ttl: 1800  # 30 minutos TTL para tarifas base
      surge_ttl: 300       # 5 minutos TTL para surge pricing
      zone_ttl: 3600       # 1 hora TTL para zonas de precios
      
    # Configuración para sesiones de chat
    chat:
      session_ttl: 7200    # 2 horas TTL para sesiones de chat
      message_ttl: 86400   # 24 horas TTL para mensajes
      
    # Configuración para geolocalización
    geolocation:
      driver_radius: 5000  # Radio en metros para búsqueda
      update_interval: 30  # Intervalo de actualización en segundos
      cleanup_interval: 300 # Limpieza cada 5 minutos
      
    # Configuración para analytics en tiempo real
    analytics:
      metrics_ttl: 3600    # 1 hora TTL para métricas
      counters_ttl: 86400  # 24 horas TTL para contadores
      events_ttl: 1800     # 30 minutos TTL para eventos

---
# ====================================================================
# 🗃️ DEPLOYMENT REDIS MEMORY STORE GCP
# ====================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-oasistaxi-deployment
  namespace: oasistaxi-prod
  labels:
    app: oasistaxi-redis
    version: "7.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: oasistaxi-redis
  template:
    metadata:
      labels:
        app: oasistaxi-redis
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: redis-config
          mountPath: /usr/local/etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-oasistaxi-config
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# ====================================================================
# 🌐 SERVICE REDIS
# ====================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis-oasistaxi-service
  namespace: oasistaxi-prod
  labels:
    app: oasistaxi-redis
spec:
  selector:
    app: oasistaxi-redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP

---
# ====================================================================
# 💾 PERSISTENT VOLUME CLAIM
# ====================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: oasistaxi-prod
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: ssd

---
# ====================================================================
# 🔐 SECRET PARA REDIS PASSWORD
# ====================================================================
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: oasistaxi-prod
type: Opaque
data:
  password: T2FzaXNUYXhpUGVydTIwMjRSZWRpcyFAIw==  # Base64 encoded password

---
# ====================================================================
# 🗂️ REDIS NAMESPACE
# ====================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: oasistaxi-prod
  labels:
    name: oasistaxi-prod
    env: production

---
# ====================================================================
# 📈 MONITORING SERVICE - REDIS EXPORTER
# ====================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: oasistaxi-prod
  labels:
    app: redis-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-exporter
  template:
    metadata:
      labels:
        app: redis-exporter
    spec:
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
        env:
        - name: REDIS_ADDR
          value: "redis-oasistaxi-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
# ====================================================================
# 🔍 SERVICE MONITOR PARA PROMETHEUS
# ====================================================================
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-service-monitor
  namespace: oasistaxi-prod
  labels:
    app: redis-exporter
spec:
  selector:
    matchLabels:
      app: redis-exporter
  endpoints:
  - port: metrics

---
# ====================================================================
# 🚨 ALERTING RULES PARA REDIS
# ====================================================================
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: redis-alerts
  namespace: oasistaxi-prod
  labels:
    app: redis-alerts
spec:
  groups:
  - name: redis.rules
    rules:
    - alert: RedisDown
      expr: redis_up == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Redis instance is down"
        description: "Redis instance {{ $labels.instance }} is down"
    
    - alert: RedisMemoryHigh
      expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Redis memory usage is high"
        description: "Redis memory usage is above 90%"
    
    - alert: RedisConnections
      expr: redis_connected_clients > 1000
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High number of Redis connections"
        description: "Redis has {{ $value }} connections"

# ====================================================================
# 🚀 COMANDOS DE DEPLOYMENT
# ====================================================================
# 
# 1. Crear namespace y aplicar configuración:
# kubectl apply -f redis-config.yaml
#
# 2. Verificar deployment:
# kubectl get pods -n oasistaxi-prod
# kubectl get services -n oasistaxi-prod
#
# 3. Conectar a Redis para testing:
# kubectl port-forward service/redis-oasistaxi-service 6379:6379 -n oasistaxi-prod
# redis-cli -h localhost -p 6379 -a "OasisTaxiPeru2024Redis!@#"
#
# 4. Monitorear métricas:
# kubectl port-forward service/redis-exporter 9121:9121 -n oasistaxi-prod
# curl http://localhost:9121/metrics
#
# 5. Ver logs:
# kubectl logs -f deployment/redis-oasistaxi-deployment -n oasistaxi-prod
#
# 6. Configurar Google Cloud Memorystore (alternativa):
# gcloud redis instances create oasistaxi-redis \
#   --size=2 \
#   --region=southamerica-east1 \
#   --redis-version=redis_7_0 \
#   --tier=standard-ha
#
# ====================================================================