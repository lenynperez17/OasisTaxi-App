#!/bin/bash

# üîç VALIDACI√ìN DE CONFIGURACI√ìN DE ENTORNO - OASISTAXI
# Este script verifica que todas las variables cr√≠ticas est√©n configuradas

echo "================================================"
echo "üîç VALIDACI√ìN DE CONFIGURACI√ìN OASISTAXI"
echo "================================================"

# Verificar que .env existe
if [ ! -f ".env" ]; then
  echo "‚ùå ERROR: Archivo .env no encontrado"
  exit 1
fi

echo "‚úÖ Archivo .env encontrado"

# Verificar que no hay placeholders CHANGE_ME_IN_PROD
if grep -q "CHANGE_ME_IN_PROD" .env; then
  echo "‚ùå ERROR: Se encontraron placeholders CHANGE_ME_IN_PROD en .env"
  echo "Variables con placeholders:"
  grep "CHANGE_ME_IN_PROD" .env | cut -d'=' -f1
  exit 1
fi

echo "‚úÖ No se encontraron placeholders CHANGE_ME_IN_PROD"

# Variables cr√≠ticas a verificar
CRITICAL_VARS=(
  "FIREBASE_PROJECT_ID"
  "FIREBASE_API_KEY"
  "GOOGLE_MAPS_API_KEY"
  "ENCRYPTION_KEY_ID"
  "JWT_SECRET"
  "FIREBASE_SERVICE_ACCOUNT_EMAIL"
  "FIREBASE_PRIVATE_KEY"
  "FIREBASE_CLIENT_EMAIL"
  "FIREBASE_CLIENT_ID"
  "CLOUD_KMS_PROJECT_ID"
  "FIREBASE_APP_CHECK_SITE_KEY"
  "MERCADOPAGO_PUBLIC_KEY"
  "MERCADOPAGO_ACCESS_TOKEN"
  "TWILIO_ACCOUNT_SID"
  "SENDGRID_API_KEY"
)

# Cargar variables desde .env
export $(grep -v '^#' .env | xargs)

ERRORS=0

echo ""
echo "Validando variables cr√≠ticas..."
echo "--------------------------------"

for VAR in "${CRITICAL_VARS[@]}"; do
  VALUE="${!VAR}"

  if [ -z "$VALUE" ]; then
    echo "‚ùå $VAR: FALTANTE"
    ERRORS=$((ERRORS + 1))
  elif [[ "$VALUE" == *"PLACEHOLDER"* ]] || [[ "$VALUE" == *"EXAMPLE"* ]] || [[ "$VALUE" == *"change"* ]]; then
    echo "‚ùå $VAR: Contiene placeholder o valor de ejemplo"
    ERRORS=$((ERRORS + 1))
  else
    # Verificaci√≥n espec√≠fica para ENCRYPTION_KEY_ID
    if [ "$VAR" == "ENCRYPTION_KEY_ID" ]; then
      if [[ ! "$VALUE" =~ ^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$ ]]; then
        echo "‚ùå $VAR: Formato inv√°lido (debe ser projects/PROJECT/locations/LOCATION/keyRings/KEYRING/cryptoKeys/KEY)"
        ERRORS=$((ERRORS + 1))
      else
        echo "‚úÖ $VAR: Configurado correctamente"
      fi
    # Verificaci√≥n espec√≠fica para FIREBASE_PRIVATE_KEY
    elif [ "$VAR" == "FIREBASE_PRIVATE_KEY" ]; then
      if [[ ! "$VALUE" == *"-----BEGIN PRIVATE KEY-----"* ]]; then
        echo "‚ùå $VAR: No parece ser una clave privada v√°lida"
        ERRORS=$((ERRORS + 1))
      else
        echo "‚úÖ $VAR: Configurado correctamente"
      fi
    else
      echo "‚úÖ $VAR: Configurado"
    fi
  fi
done

echo ""
echo "================================================"

if [ $ERRORS -eq 0 ]; then
  echo "‚úÖ VALIDACI√ìN EXITOSA"
  echo "Todas las variables cr√≠ticas est√°n configuradas correctamente"
  echo "La aplicaci√≥n est√° lista para ejecutarse en producci√≥n"
  exit 0
else
  echo "‚ùå VALIDACI√ìN FALLIDA"
  echo "Se encontraron $ERRORS errores en la configuraci√≥n"
  echo "Por favor, revise y corrija las variables marcadas con ‚ùå"
  exit 1
fi